[build-system]
requires = ["setuptools", "lsst-versions >= 1.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "lsst-dax-apdb"
description = "Alert Products Database for LSST AP pipeline."
license = "GPL-3.0-or-later"
license-files = ["COPYRIGHT", "LICENSE"]
readme = "README.md"
authors = [
    {name="Rubin Observatory Data Management", email="dm-admin@lists.lsst.org"},
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = ["lsst"]
dependencies = [
    "astropy",
    "lsst-felis",
    "lsst-pex-config",
    "lsst-sphgeom",
    "lsst-utils",
    "numpy",
    "pandas",
    "pydantic",
    "pyyaml >= 5.1",
    "sqlalchemy"
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/lsst/dax_apdb"

[project.optional-dependencies]
test = [
    "pytest >= 3.2",
    "flake8 >= 3.7.5",
    "pytest-flake8 >= 1.0.4",
    "pytest-openfiles >= 0.5.0"
]
postgres = ["psycopg2"]
cassandra = ["cassandra-driver"]

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools]
zip-safe = true

[tool.setuptools.package-data]
"lsst.dax.apdb" = ["py.typed"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[project.scripts]
apdb-cli = "lsst.dax.apdb.cli.apdb_cli:main"

[tool.black]
line-length = 110
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 110

[tool.lsst_versions]
write_to = "python/lsst/dax/apdb/version.py"

[tool.ruff]
line-length = 110
target-version = "py311"
exclude = [
    "__init__.py",
    "doc/conf.py",
]

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
    "D400",
]
select = [
    "E",  # pycodestyle
    "F",  # pycodestyle
    "N",  # pep8-naming
    "W",  # pycodestyle
    "D",  # pydocstyle
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "I",  # isort
    "RUF022",  # sort __all__
]
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.lint.per-file-ignores]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
known-first-party = ["lsst"]

[tool.ruff.format]
docstring-code-format = true
# Formatter does not know about indenting.
docstring-code-line-length = 69

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
